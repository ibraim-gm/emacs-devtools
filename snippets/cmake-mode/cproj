# contributor: Rafael Ibraim <ibraim.gm@gmail.com>
# name: CMake project template for C
# --
cmake_minimum_required(VERSION 3.0)

# project information
project(${1:project?}
  LANGUAGES C
  VERSION 0.1.0
  )

set(PROJECT_CANONICAL_NAME ${1:$(downcase yas-text)})
set(PROJECT_SHORT_DESCRIPTION "${2:description?}")
set(PROJECT_COPYRIGHT_YEAR ${3:year?})
set(PROJECT_COPYRIGHT_AUTHOR "${4:author?}")

# if no one defined a package, we build in standalone mode
if (NOT IN_PACKAGE)
  SET(IN_PACKAGE 0)
endif()

# generate it's own config.h
configure_file (
  "\${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in"
  "\${CMAKE_CURRENT_SOURCE_DIR}/src/config.h"
  )

# determine sources and libraries
set(${1:$(upcase yas-text)}_SOURCES
  put
  your
  sources
  here
  )

set(${1:$(upcase yas-text)}_LIBS dummylib) # sample on how to link to a library

# main target config
add_executable(${1:$(downcase yas-text)} \${${1:$(upcase yas-text)}_SOURCES})
target_link_libraries(${1:$(downcase yas-text)} \${${1:$(upcase yas-text)}_LIBS})
set_property(TARGET ${1:$(downcase yas-text)} PROPERTY C_STANDARD 11)
set_property(TARGET ${1:$(downcase yas-text)} PROPERTY C_STANDARD_REQUIRED ON)

# compiler-specific flags
IF(CMAKE_C_COMPILER_ID MATCHES "GNU")
  set_property(TARGET ${1:$(downcase yas-text)} PROPERTY COMPILE_OPTIONS -Wall -Wextra -pedantic)
ENDIF()
